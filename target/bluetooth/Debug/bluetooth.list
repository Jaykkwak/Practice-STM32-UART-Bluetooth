
bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800122c  0800122c  0001122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001244  08001244  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001244  08001244  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001244  08001244  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001244  08001244  00011244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001248  08001248  00011248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800124c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000a4  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  00020018  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 14 .debug_info   000018a7  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000624  00000000  00000000  0002192c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001a0  00000000  00000000  00021f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000012d  00000000  00000000  000220f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000286a  00000000  00000000  0002221d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001ff8  00000000  00000000  00024a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009eeb  00000000  00000000  00026a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000005dc  00000000  00000000  0003096c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00030f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001214 	.word	0x08001214

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08001214 	.word	0x08001214

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <GPIO_LEDInit>:
USART_Handle_t usart2_handle;
uint8_t rx_buff[100];
uint8_t rxCmplt = SET;

void GPIO_LEDInit(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80001e2:	4b15      	ldr	r3, [pc, #84]	; (8000238 <GPIO_LEDInit+0x5c>)
 80001e4:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80001ea:	2301      	movs	r3, #1
 80001ec:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001ee:	2302      	movs	r3, #2
 80001f0:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001f2:	2300      	movs	r3, #0
 80001f4:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001f6:	2300      	movs	r3, #0
 80001f8:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioLed);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f99f 	bl	8000540 <GPIO_Init>

	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_1;
 8000202:	2301      	movs	r3, #1
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f999 	bl	8000540 <GPIO_Init>

	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800020e:	2302      	movs	r3, #2
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f993 	bl	8000540 <GPIO_Init>

	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800021a:	2303      	movs	r3, #3
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f98d 	bl	8000540 <GPIO_Init>


	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000226:	2101      	movs	r1, #1
 8000228:	4803      	ldr	r0, [pc, #12]	; (8000238 <GPIO_LEDInit+0x5c>)
 800022a:	f000 f905 	bl	8000438 <GPIO_PeriClockControl>

}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020c00 	.word	0x40020c00

0800023c <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <USART2_GPIOInit+0x40>)
 8000244:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000246:	2302      	movs	r3, #2
 8000248:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800024a:	2300      	movs	r3, #0
 800024c:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800024e:	2301      	movs	r3, #1
 8000250:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000252:	2302      	movs	r3, #2
 8000254:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000256:	2307      	movs	r3, #7
 8000258:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 800025a:	2302      	movs	r3, #2
 800025c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f96d 	bl	8000540 <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000266:	2303      	movs	r3, #3
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f967 	bl	8000540 <GPIO_Init>

}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40020000 	.word	0x40020000

08000280 <USART2_Init>:


void USART2_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <USART2_Init+0x44>)
 8000286:	4a10      	ldr	r2, [pc, #64]	; (80002c8 <USART2_Init+0x48>)
 8000288:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <USART2_Init+0x44>)
 800028c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000290:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <USART2_Init+0x44>)
 8000294:	2200      	movs	r2, #0
 8000296:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_RX;
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <USART2_Init+0x44>)
 800029a:	2201      	movs	r2, #1
 800029c:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <USART2_Init+0x44>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <USART2_Init+0x44>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <USART2_Init+0x44>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	739a      	strb	r2, [r3, #14]
	usart2_handle.RxBusyState = USART_READY;
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <USART2_Init+0x44>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	USART_Init(&usart2_handle);
 80002b8:	4802      	ldr	r0, [pc, #8]	; (80002c4 <USART2_Init+0x44>)
 80002ba:	f000 fbb0 	bl	8000a1e <USART_Init>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000034 	.word	0x20000034
 80002c8:	40004400 	.word	0x40004400

080002cc <delay>:


void delay(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80002d2:	2300      	movs	r3, #0
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	e002      	b.n	80002de <delay+0x12>
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	3301      	adds	r3, #1
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <delay+0x28>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d9f8      	bls.n	80002d8 <delay+0xc>
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	0007a11f 	.word	0x0007a11f

080002f8 <main>:

int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	GPIO_LEDInit();
 80002fc:	f7ff ff6e 	bl	80001dc <GPIO_LEDInit>

	USART2_GPIOInit();
 8000300:	f7ff ff9c 	bl	800023c <USART2_GPIOInit>

	USART2_Init();
 8000304:	f7ff ffbc 	bl	8000280 <USART2_Init>

	USART_IRQInterruptConfig(IRQ_NO_USART2, ENABLE);
 8000308:	2101      	movs	r1, #1
 800030a:	2026      	movs	r0, #38	; 0x26
 800030c:	f000 fd04 	bl	8000d18 <USART_IRQInterruptConfig>

	//USART_IRQPriorityConfig(IRQ_NO_USART2, 0);

	USART_PeripheralControl(USART2,ENABLE);
 8000310:	2101      	movs	r1, #1
 8000312:	4832      	ldr	r0, [pc, #200]	; (80003dc <main+0xe4>)
 8000314:	f000 fca0 	bl	8000c58 <USART_PeripheralControl>

	//USART_ReceiveDataIT(&usart2_handle,rx_buff,10);

	while(1){
		delay();
 8000318:	f7ff ffd8 	bl	80002cc <delay>
		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart2_handle,rx_buff, 50) != USART_READY );
 800031c:	bf00      	nop
 800031e:	2232      	movs	r2, #50	; 0x32
 8000320:	492f      	ldr	r1, [pc, #188]	; (80003e0 <main+0xe8>)
 8000322:	4830      	ldr	r0, [pc, #192]	; (80003e4 <main+0xec>)
 8000324:	f000 fbfe 	bl	8000b24 <USART_ReceiveDataIT>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d1f7      	bne.n	800031e <main+0x26>
		while(rxCmplt != SET);
 800032e:	bf00      	nop
 8000330:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <main+0xf0>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d1fb      	bne.n	8000330 <main+0x38>

		if(strcmp((char *)rx_buff, "Hi.") == 0){
 8000338:	492c      	ldr	r1, [pc, #176]	; (80003ec <main+0xf4>)
 800033a:	4829      	ldr	r0, [pc, #164]	; (80003e0 <main+0xe8>)
 800033c:	f7ff ff44 	bl	80001c8 <strcmp>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d10c      	bne.n	8000360 <main+0x68>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_0, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2100      	movs	r1, #0
 800034a:	4829      	ldr	r0, [pc, #164]	; (80003f0 <main+0xf8>)
 800034c:	f000 fa94 	bl	8000878 <GPIO_WriteToOutputPin>
			delay();
 8000350:	f7ff ffbc 	bl	80002cc <delay>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_0, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2100      	movs	r1, #0
 8000358:	4825      	ldr	r0, [pc, #148]	; (80003f0 <main+0xf8>)
 800035a:	f000 fa8d 	bl	8000878 <GPIO_WriteToOutputPin>
 800035e:	e033      	b.n	80003c8 <main+0xd0>
		}
		else if(strcmp((char *)rx_buff, "Bye.") == 0){
 8000360:	4924      	ldr	r1, [pc, #144]	; (80003f4 <main+0xfc>)
 8000362:	481f      	ldr	r0, [pc, #124]	; (80003e0 <main+0xe8>)
 8000364:	f7ff ff30 	bl	80001c8 <strcmp>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d10c      	bne.n	8000388 <main+0x90>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_1, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2101      	movs	r1, #1
 8000372:	481f      	ldr	r0, [pc, #124]	; (80003f0 <main+0xf8>)
 8000374:	f000 fa80 	bl	8000878 <GPIO_WriteToOutputPin>
			delay();
 8000378:	f7ff ffa8 	bl	80002cc <delay>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_1, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	2101      	movs	r1, #1
 8000380:	481b      	ldr	r0, [pc, #108]	; (80003f0 <main+0xf8>)
 8000382:	f000 fa79 	bl	8000878 <GPIO_WriteToOutputPin>
 8000386:	e01f      	b.n	80003c8 <main+0xd0>
		}else if(strcmp((char *)rx_buff, "See you.") == 0){
 8000388:	491b      	ldr	r1, [pc, #108]	; (80003f8 <main+0x100>)
 800038a:	4815      	ldr	r0, [pc, #84]	; (80003e0 <main+0xe8>)
 800038c:	f7ff ff1c 	bl	80001c8 <strcmp>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d10c      	bne.n	80003b0 <main+0xb8>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_2, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2102      	movs	r1, #2
 800039a:	4815      	ldr	r0, [pc, #84]	; (80003f0 <main+0xf8>)
 800039c:	f000 fa6c 	bl	8000878 <GPIO_WriteToOutputPin>
			delay();
 80003a0:	f7ff ff94 	bl	80002cc <delay>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_2, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2102      	movs	r1, #2
 80003a8:	4811      	ldr	r0, [pc, #68]	; (80003f0 <main+0xf8>)
 80003aa:	f000 fa65 	bl	8000878 <GPIO_WriteToOutputPin>
 80003ae:	e00b      	b.n	80003c8 <main+0xd0>
		}
		else{
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_3, GPIO_PIN_SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2103      	movs	r1, #3
 80003b4:	480e      	ldr	r0, [pc, #56]	; (80003f0 <main+0xf8>)
 80003b6:	f000 fa5f 	bl	8000878 <GPIO_WriteToOutputPin>
			delay();
 80003ba:	f7ff ff87 	bl	80002cc <delay>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_3, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	2103      	movs	r1, #3
 80003c2:	480b      	ldr	r0, [pc, #44]	; (80003f0 <main+0xf8>)
 80003c4:	f000 fa58 	bl	8000878 <GPIO_WriteToOutputPin>
		}

		memset(rx_buff, 0, sizeof(rx_buff));
 80003c8:	2264      	movs	r2, #100	; 0x64
 80003ca:	2100      	movs	r1, #0
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <main+0xe8>)
 80003ce:	f000 fef4 	bl	80011ba <memset>

		rxCmplt = RESET;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <main+0xf0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
		delay();
 80003d8:	e79e      	b.n	8000318 <main+0x20>
 80003da:	bf00      	nop
 80003dc:	40004400 	.word	0x40004400
 80003e0:	20000058 	.word	0x20000058
 80003e4:	20000034 	.word	0x20000034
 80003e8:	20000000 	.word	0x20000000
 80003ec:	0800122c 	.word	0x0800122c
 80003f0:	40020c00 	.word	0x40020c00
 80003f4:	08001230 	.word	0x08001230
 80003f8:	08001238 	.word	0x08001238

080003fc <USART2_IRQHandler>:
	}
}


void USART2_IRQHandler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0


	USART_IRQHandling(&usart2_handle);
 8000400:	4802      	ldr	r0, [pc, #8]	; (800040c <USART2_IRQHandler+0x10>)
 8000402:	f000 fd0d 	bl	8000e20 <USART_IRQHandling>

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000034 	.word	0x20000034

08000410 <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d102      	bne.n	8000428 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <USART_ApplicationEventCallback+0x24>)
 8000424:	2201      	movs	r2, #1
 8000426:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	20000000 	.word	0x20000000

08000438 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000444:	78fb      	ldrb	r3, [r7, #3]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d161      	bne.n	800050e <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a32      	ldr	r2, [pc, #200]	; (8000518 <GPIO_PeriClockControl+0xe0>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000452:	4b32      	ldr	r3, [pc, #200]	; (800051c <GPIO_PeriClockControl+0xe4>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a31      	ldr	r2, [pc, #196]	; (800051c <GPIO_PeriClockControl+0xe4>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 800045e:	e056      	b.n	800050e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a2f      	ldr	r2, [pc, #188]	; (8000520 <GPIO_PeriClockControl+0xe8>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000468:	4b2c      	ldr	r3, [pc, #176]	; (800051c <GPIO_PeriClockControl+0xe4>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a2b      	ldr	r2, [pc, #172]	; (800051c <GPIO_PeriClockControl+0xe4>)
 800046e:	f043 0302 	orr.w	r3, r3, #2
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000474:	e04b      	b.n	800050e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a2a      	ldr	r2, [pc, #168]	; (8000524 <GPIO_PeriClockControl+0xec>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800047e:	4b27      	ldr	r3, [pc, #156]	; (800051c <GPIO_PeriClockControl+0xe4>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4a26      	ldr	r2, [pc, #152]	; (800051c <GPIO_PeriClockControl+0xe4>)
 8000484:	f043 0304 	orr.w	r3, r3, #4
 8000488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048a:	e040      	b.n	800050e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a26      	ldr	r2, [pc, #152]	; (8000528 <GPIO_PeriClockControl+0xf0>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000494:	4b21      	ldr	r3, [pc, #132]	; (800051c <GPIO_PeriClockControl+0xe4>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000498:	4a20      	ldr	r2, [pc, #128]	; (800051c <GPIO_PeriClockControl+0xe4>)
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a0:	e035      	b.n	800050e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a21      	ldr	r2, [pc, #132]	; (800052c <GPIO_PeriClockControl+0xf4>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004aa:	4b1c      	ldr	r3, [pc, #112]	; (800051c <GPIO_PeriClockControl+0xe4>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ae:	4a1b      	ldr	r2, [pc, #108]	; (800051c <GPIO_PeriClockControl+0xe4>)
 80004b0:	f043 0310 	orr.w	r3, r3, #16
 80004b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b6:	e02a      	b.n	800050e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a1d      	ldr	r2, [pc, #116]	; (8000530 <GPIO_PeriClockControl+0xf8>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d106      	bne.n	80004ce <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80004c0:	4b16      	ldr	r3, [pc, #88]	; (800051c <GPIO_PeriClockControl+0xe4>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4a15      	ldr	r2, [pc, #84]	; (800051c <GPIO_PeriClockControl+0xe4>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004cc:	e01f      	b.n	800050e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a18      	ldr	r2, [pc, #96]	; (8000534 <GPIO_PeriClockControl+0xfc>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <GPIO_PeriClockControl+0xe4>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a10      	ldr	r2, [pc, #64]	; (800051c <GPIO_PeriClockControl+0xe4>)
 80004dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e2:	e014      	b.n	800050e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a14      	ldr	r2, [pc, #80]	; (8000538 <GPIO_PeriClockControl+0x100>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <GPIO_PeriClockControl+0xe4>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f0:	4a0a      	ldr	r2, [pc, #40]	; (800051c <GPIO_PeriClockControl+0xe4>)
 80004f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f8:	e009      	b.n	800050e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a0f      	ldr	r2, [pc, #60]	; (800053c <GPIO_PeriClockControl+0x104>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d105      	bne.n	800050e <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <GPIO_PeriClockControl+0xe4>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <GPIO_PeriClockControl+0xe4>)
 8000508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40020000 	.word	0x40020000
 800051c:	40023800 	.word	0x40023800
 8000520:	40020400 	.word	0x40020400
 8000524:	40020800 	.word	0x40020800
 8000528:	40020c00 	.word	0x40020c00
 800052c:	40021000 	.word	0x40021000
 8000530:	40021400 	.word	0x40021400
 8000534:	40021800 	.word	0x40021800
 8000538:	40021c00 	.word	0x40021c00
 800053c:	40022000 	.word	0x40022000

08000540 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2101      	movs	r1, #1
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ff70 	bl	8000438 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	2b03      	cmp	r3, #3
 800055e:	d820      	bhi.n	80005a2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	795b      	ldrb	r3, [r3, #5]
 8000564:	461a      	mov	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	fa02 f303 	lsl.w	r3, r2, r3
 8000570:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	2103      	movs	r1, #3
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	4619      	mov	r1, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	400a      	ands	r2, r1
 800058e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6819      	ldr	r1, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	430a      	orrs	r2, r1
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	e0cb      	b.n	800073a <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d117      	bne.n	80005da <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005aa:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <GPIO_Init+0x198>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7912      	ldrb	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a47      	ldr	r2, [pc, #284]	; (80006d8 <GPIO_Init+0x198>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c0:	4b45      	ldr	r3, [pc, #276]	; (80006d8 <GPIO_Init+0x198>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7912      	ldrb	r2, [r2, #4]
 80005c8:	4611      	mov	r1, r2
 80005ca:	2201      	movs	r2, #1
 80005cc:	408a      	lsls	r2, r1
 80005ce:	43d2      	mvns	r2, r2
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a41      	ldr	r2, [pc, #260]	; (80006d8 <GPIO_Init+0x198>)
 80005d4:	400b      	ands	r3, r1
 80005d6:	6093      	str	r3, [r2, #8]
 80005d8:	e035      	b.n	8000646 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	795b      	ldrb	r3, [r3, #5]
 80005de:	2b05      	cmp	r3, #5
 80005e0:	d117      	bne.n	8000612 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e2:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <GPIO_Init+0x198>)
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	7912      	ldrb	r2, [r2, #4]
 80005ea:	4611      	mov	r1, r2
 80005ec:	2201      	movs	r2, #1
 80005ee:	408a      	lsls	r2, r1
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a39      	ldr	r2, [pc, #228]	; (80006d8 <GPIO_Init+0x198>)
 80005f4:	430b      	orrs	r3, r1
 80005f6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f8:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <GPIO_Init+0x198>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	7912      	ldrb	r2, [r2, #4]
 8000600:	4611      	mov	r1, r2
 8000602:	2201      	movs	r2, #1
 8000604:	408a      	lsls	r2, r1
 8000606:	43d2      	mvns	r2, r2
 8000608:	4611      	mov	r1, r2
 800060a:	4a33      	ldr	r2, [pc, #204]	; (80006d8 <GPIO_Init+0x198>)
 800060c:	400b      	ands	r3, r1
 800060e:	60d3      	str	r3, [r2, #12]
 8000610:	e019      	b.n	8000646 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	795b      	ldrb	r3, [r3, #5]
 8000616:	2b06      	cmp	r3, #6
 8000618:	d115      	bne.n	8000646 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <GPIO_Init+0x198>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	7912      	ldrb	r2, [r2, #4]
 8000622:	4611      	mov	r1, r2
 8000624:	2201      	movs	r2, #1
 8000626:	408a      	lsls	r2, r1
 8000628:	4611      	mov	r1, r2
 800062a:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <GPIO_Init+0x198>)
 800062c:	430b      	orrs	r3, r1
 800062e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <GPIO_Init+0x198>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	7912      	ldrb	r2, [r2, #4]
 8000638:	4611      	mov	r1, r2
 800063a:	2201      	movs	r2, #1
 800063c:	408a      	lsls	r2, r1
 800063e:	4611      	mov	r1, r2
 8000640:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <GPIO_Init+0x198>)
 8000642:	430b      	orrs	r3, r1
 8000644:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	089b      	lsrs	r3, r3, #2
 800064c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <GPIO_Init+0x19c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d04e      	beq.n	8000700 <GPIO_Init+0x1c0>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <GPIO_Init+0x1a0>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d032      	beq.n	80006d2 <GPIO_Init+0x192>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <GPIO_Init+0x1a4>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d02b      	beq.n	80006ce <GPIO_Init+0x18e>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <GPIO_Init+0x1a8>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d024      	beq.n	80006ca <GPIO_Init+0x18a>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <GPIO_Init+0x1ac>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d01d      	beq.n	80006c6 <GPIO_Init+0x186>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <GPIO_Init+0x1b0>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d016      	beq.n	80006c2 <GPIO_Init+0x182>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <GPIO_Init+0x1b4>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d00f      	beq.n	80006be <GPIO_Init+0x17e>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <GPIO_Init+0x1b8>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d008      	beq.n	80006ba <GPIO_Init+0x17a>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a13      	ldr	r2, [pc, #76]	; (80006fc <GPIO_Init+0x1bc>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d101      	bne.n	80006b6 <GPIO_Init+0x176>
 80006b2:	2308      	movs	r3, #8
 80006b4:	e025      	b.n	8000702 <GPIO_Init+0x1c2>
 80006b6:	2300      	movs	r3, #0
 80006b8:	e023      	b.n	8000702 <GPIO_Init+0x1c2>
 80006ba:	2307      	movs	r3, #7
 80006bc:	e021      	b.n	8000702 <GPIO_Init+0x1c2>
 80006be:	2306      	movs	r3, #6
 80006c0:	e01f      	b.n	8000702 <GPIO_Init+0x1c2>
 80006c2:	2305      	movs	r3, #5
 80006c4:	e01d      	b.n	8000702 <GPIO_Init+0x1c2>
 80006c6:	2304      	movs	r3, #4
 80006c8:	e01b      	b.n	8000702 <GPIO_Init+0x1c2>
 80006ca:	2303      	movs	r3, #3
 80006cc:	e019      	b.n	8000702 <GPIO_Init+0x1c2>
 80006ce:	2302      	movs	r3, #2
 80006d0:	e017      	b.n	8000702 <GPIO_Init+0x1c2>
 80006d2:	2301      	movs	r3, #1
 80006d4:	e015      	b.n	8000702 <GPIO_Init+0x1c2>
 80006d6:	bf00      	nop
 80006d8:	40013c00 	.word	0x40013c00
 80006dc:	40020000 	.word	0x40020000
 80006e0:	40020400 	.word	0x40020400
 80006e4:	40020800 	.word	0x40020800
 80006e8:	40020c00 	.word	0x40020c00
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40021400 	.word	0x40021400
 80006f4:	40021800 	.word	0x40021800
 80006f8:	40021c00 	.word	0x40021c00
 80006fc:	40022000 	.word	0x40022000
 8000700:	2300      	movs	r3, #0
 8000702:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000704:	4b59      	ldr	r3, [pc, #356]	; (800086c <GPIO_Init+0x32c>)
 8000706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000708:	4a58      	ldr	r2, [pc, #352]	; (800086c <GPIO_Init+0x32c>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000710:	7c7a      	ldrb	r2, [r7, #17]
 8000712:	7cbb      	ldrb	r3, [r7, #18]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	fa02 f103 	lsl.w	r1, r2, r3
 800071a:	4a55      	ldr	r2, [pc, #340]	; (8000870 <GPIO_Init+0x330>)
 800071c:	7cfb      	ldrb	r3, [r7, #19]
 800071e:	3302      	adds	r3, #2
 8000720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000724:	4b53      	ldr	r3, [pc, #332]	; (8000874 <GPIO_Init+0x334>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	7912      	ldrb	r2, [r2, #4]
 800072c:	4611      	mov	r1, r2
 800072e:	2201      	movs	r2, #1
 8000730:	408a      	lsls	r2, r1
 8000732:	4611      	mov	r1, r2
 8000734:	4a4f      	ldr	r2, [pc, #316]	; (8000874 <GPIO_Init+0x334>)
 8000736:	430b      	orrs	r3, r1
 8000738:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	799b      	ldrb	r3, [r3, #6]
 800073e:	461a      	mov	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	689a      	ldr	r2, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	2103      	movs	r1, #3
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43db      	mvns	r3, r3
 8000760:	4619      	mov	r1, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	400a      	ands	r2, r1
 8000768:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6899      	ldr	r1, [r3, #8]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	430a      	orrs	r2, r1
 8000778:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	79db      	ldrb	r3, [r3, #7]
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	68da      	ldr	r2, [r3, #12]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	2103      	movs	r1, #3
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43db      	mvns	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	400a      	ands	r2, r1
 80007a8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	68d9      	ldr	r1, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	430a      	orrs	r2, r1
 80007b8:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7a1b      	ldrb	r3, [r3, #8]
 80007be:	461a      	mov	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	4619      	mov	r1, r3
 80007d6:	2301      	movs	r3, #1
 80007d8:	408b      	lsls	r3, r1
 80007da:	43db      	mvns	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	400a      	ands	r2, r1
 80007e4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6859      	ldr	r1, [r3, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	430a      	orrs	r2, r1
 80007f4:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	795b      	ldrb	r3, [r3, #5]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d131      	bne.n	8000862 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	08db      	lsrs	r3, r3, #3
 8000804:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	7c3a      	ldrb	r2, [r7, #16]
 8000816:	3208      	adds	r2, #8
 8000818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	220f      	movs	r2, #15
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	43db      	mvns	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	7c3a      	ldrb	r2, [r7, #16]
 8000830:	4001      	ands	r1, r0
 8000832:	3208      	adds	r2, #8
 8000834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	7c3a      	ldrb	r2, [r7, #16]
 800083e:	3208      	adds	r2, #8
 8000840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a5b      	ldrb	r3, [r3, #9]
 8000848:	461a      	mov	r2, r3
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	4618      	mov	r0, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	7c3a      	ldrb	r2, [r7, #16]
 800085a:	4301      	orrs	r1, r0
 800085c:	3208      	adds	r2, #8
 800085e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40013800 	.word	0x40013800
 8000874:	40013c00 	.word	0x40013c00

08000878 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
 8000884:	4613      	mov	r3, r2
 8000886:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000888:	78bb      	ldrb	r3, [r7, #2]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d109      	bne.n	80008a2 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	78fa      	ldrb	r2, [r7, #3]
 8000894:	2101      	movs	r1, #1
 8000896:	fa01 f202 	lsl.w	r2, r1, r2
 800089a:	431a      	orrs	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 80008a0:	e009      	b.n	80008b6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	78fa      	ldrb	r2, [r7, #3]
 80008a8:	2101      	movs	r1, #1
 80008aa:	fa01 f202 	lsl.w	r2, r1, r2
 80008ae:	43d2      	mvns	r2, r2
 80008b0:	401a      	ands	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	615a      	str	r2, [r3, #20]
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <RCC_GetPCLK1Value+0x9c>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	f003 0303 	and.w	r3, r3, #3
 80008d2:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 80008d4:	7a7b      	ldrb	r3, [r7, #9]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d102      	bne.n	80008e0 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <RCC_GetPCLK1Value+0xa0>)
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e00b      	b.n	80008f8 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 80008e0:	7a7b      	ldrb	r3, [r7, #9]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d102      	bne.n	80008ec <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <RCC_GetPCLK1Value+0xa4>)
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	e005      	b.n	80008f8 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 80008ec:	7a7b      	ldrb	r3, [r7, #9]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d102      	bne.n	80008f8 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80008f2:	f000 f88d 	bl	8000a10 <RCC_GetPLLOutputClock>
 80008f6:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <RCC_GetPCLK1Value+0x9c>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	091b      	lsrs	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	f003 030f 	and.w	r3, r3, #15
 8000904:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000906:	7a3b      	ldrb	r3, [r7, #8]
 8000908:	2b07      	cmp	r3, #7
 800090a:	d802      	bhi.n	8000912 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	72fb      	strb	r3, [r7, #11]
 8000910:	e005      	b.n	800091e <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000912:	7a3b      	ldrb	r3, [r7, #8]
 8000914:	3b08      	subs	r3, #8
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <RCC_GetPCLK1Value+0xa8>)
 8000918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091c:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <RCC_GetPCLK1Value+0x9c>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	0a9b      	lsrs	r3, r3, #10
 8000924:	b2db      	uxtb	r3, r3
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 800092c:	7a3b      	ldrb	r3, [r7, #8]
 800092e:	2b03      	cmp	r3, #3
 8000930:	d802      	bhi.n	8000938 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000932:	2301      	movs	r3, #1
 8000934:	72bb      	strb	r3, [r7, #10]
 8000936:	e004      	b.n	8000942 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000938:	7a3b      	ldrb	r3, [r7, #8]
 800093a:	3b04      	subs	r3, #4
 800093c:	4a0b      	ldr	r2, [pc, #44]	; (800096c <RCC_GetPCLK1Value+0xac>)
 800093e:	5cd3      	ldrb	r3, [r2, r3]
 8000940:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000942:	7afb      	ldrb	r3, [r7, #11]
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	fbb2 f2f3 	udiv	r2, r2, r3
 800094a:	7abb      	ldrb	r3, [r7, #10]
 800094c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000950:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000952:	687b      	ldr	r3, [r7, #4]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	00f42400 	.word	0x00f42400
 8000964:	007a1200 	.word	0x007a1200
 8000968:	20000004 	.word	0x20000004
 800096c:	20000014 	.word	0x20000014

08000970 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <RCC_GetPCLK2Value+0x8c>)
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	b2db      	uxtb	r3, r3
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000988:	7a7b      	ldrb	r3, [r7, #9]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d102      	bne.n	8000994 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <RCC_GetPCLK2Value+0x90>)
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	e001      	b.n	8000998 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <RCC_GetPCLK2Value+0x94>)
 8000996:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <RCC_GetPCLK2Value+0x8c>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	091b      	lsrs	r3, r3, #4
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b07      	cmp	r3, #7
 80009a8:	d802      	bhi.n	80009b0 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	72fb      	strb	r3, [r7, #11]
 80009ae:	e005      	b.n	80009bc <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b08      	subs	r3, #8
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <RCC_GetPCLK2Value+0x98>)
 80009b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ba:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <RCC_GetPCLK2Value+0x8c>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	0b5b      	lsrs	r3, r3, #13
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d802      	bhi.n	80009d4 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	72bb      	strb	r3, [r7, #10]
 80009d2:	e004      	b.n	80009de <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b04      	subs	r3, #4
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <RCC_GetPCLK2Value+0x9c>)
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80009e6:	7abb      	ldrb	r3, [r7, #10]
 80009e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ec:	603b      	str	r3, [r7, #0]

	return pclk2;
 80009ee:	683b      	ldr	r3, [r7, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	00f42400 	.word	0x00f42400
 8000a04:	007a1200 	.word	0x007a1200
 8000a08:	20000004 	.word	0x20000004
 8000a0c:	20000014 	.word	0x20000014

08000a10 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

	return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <USART_Init>:
 */
#include "stm32f407xx_usart_driver.h"


void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b084      	sub	sp, #16
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f92d 	bl	8000c90 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	791b      	ldrb	r3, [r3, #4]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d104      	bne.n	8000a48 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	e010      	b.n	8000a6a <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	791b      	ldrb	r3, [r3, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d104      	bne.n	8000a5a <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	e007      	b.n	8000a6a <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	791b      	ldrb	r3, [r3, #4]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d103      	bne.n	8000a6a <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f043 030c 	orr.w	r3, r3, #12
 8000a68:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7b5b      	ldrb	r3, [r3, #13]
 8000a6e:	031b      	lsls	r3, r3, #12
 8000a70:	461a      	mov	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7b9b      	ldrb	r3, [r3, #14]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d104      	bne.n	8000a8a <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	e00b      	b.n	8000aa2 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7b9b      	ldrb	r3, [r3, #14]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d107      	bne.n	8000aa2 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a98:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa0:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	7b1b      	ldrb	r3, [r3, #12]
 8000ab2:	031b      	lsls	r3, r3, #12
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7bdb      	ldrb	r3, [r3, #15]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d104      	bne.n	8000ada <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e014      	b.n	8000b04 <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7bdb      	ldrb	r3, [r3, #15]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d104      	bne.n	8000aec <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	e00b      	b.n	8000b04 <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7bdb      	ldrb	r3, [r3, #15]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d107      	bne.n	8000b04 <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afa:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b02:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4610      	mov	r0, r2
 8000b18:	f000 f82c 	bl	8000b74 <USART_SetBaudRate>

}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <USART_ReceiveDataIT>:
	}
}


uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b36:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000b38:	7dfb      	ldrb	r3, [r7, #23]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d014      	beq.n	8000b68 <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	68da      	ldr	r2, [r3, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0220 	orr.w	r2, r2, #32
 8000b66:	60da      	str	r2, [r3, #12]
	}

	return rxstate;
 8000b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	371c      	adds	r7, #28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a31      	ldr	r2, [pc, #196]	; (8000c4c <USART_SetBaudRate+0xd8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d003      	beq.n	8000b92 <USART_SetBaudRate+0x1e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a30      	ldr	r2, [pc, #192]	; (8000c50 <USART_SetBaudRate+0xdc>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d103      	bne.n	8000b9a <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000b92:	f7ff feed 	bl	8000970 <RCC_GetPCLK2Value>
 8000b96:	61f8      	str	r0, [r7, #28]
 8000b98:	e002      	b.n	8000ba0 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000b9a:	f7ff fe91 	bl	80008c0 <RCC_GetPCLK1Value>
 8000b9e:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00b      	beq.n	8000bc4 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000bac:	69fa      	ldr	r2, [r7, #28]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009a      	lsls	r2, r3, #2
 8000bb6:	441a      	add	r2, r3
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	e00a      	b.n	8000bda <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	009a      	lsls	r2, r3, #2
 8000bce:	441a      	add	r2, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd8:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <USART_SetBaudRate+0xe0>)
 8000bde:	fba2 2303 	umull	r2, r3, r2, r3
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2264      	movs	r2, #100	; 0x64
 8000bf4:	fb02 f303 	mul.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00a      	beq.n	8000c20 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	3332      	adds	r3, #50	; 0x32
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <USART_SetBaudRate+0xe0>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	e009      	b.n	8000c34 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	011b      	lsls	r3, r3, #4
 8000c24:	3332      	adds	r3, #50	; 0x32
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <USART_SetBaudRate+0xe0>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	095b      	lsrs	r3, r3, #5
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	609a      	str	r2, [r3, #8]
}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40011400 	.word	0x40011400
 8000c54:	51eb851f 	.word	0x51eb851f

08000c58 <USART_PeripheralControl>:
 *
 * @Note              -

 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d106      	bne.n	8000c78 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 8000c76:	e005      	b.n	8000c84 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	60da      	str	r2, [r3, #12]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
	...

08000c90 <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d12a      	bne.n	8000cf8 <USART_PeriClockControl+0x68>
	{
		if(pUSARTx == USART1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <USART_PeriClockControl+0x74>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d106      	bne.n	8000cb8 <USART_PeriClockControl+0x28>
		{
			USART1_PCCK_EN();
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <USART_PeriClockControl+0x78>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <USART_PeriClockControl+0x78>)
 8000cb0:	f043 0310 	orr.w	r3, r3, #16
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
		//TODO
	}

}
 8000cb6:	e01f      	b.n	8000cf8 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <USART_PeriClockControl+0x7c>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d106      	bne.n	8000cce <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <USART_PeriClockControl+0x78>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <USART_PeriClockControl+0x78>)
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cca:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ccc:	e014      	b.n	8000cf8 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART3)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <USART_PeriClockControl+0x80>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d106      	bne.n	8000ce4 <USART_PeriClockControl+0x54>
			USART3_PCCK_EN();
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <USART_PeriClockControl+0x78>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <USART_PeriClockControl+0x78>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ce2:	e009      	b.n	8000cf8 <USART_PeriClockControl+0x68>
		else if (pUSARTx == UART4)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <USART_PeriClockControl+0x84>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d105      	bne.n	8000cf8 <USART_PeriClockControl+0x68>
			UART4_PCCK_EN();
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <USART_PeriClockControl+0x78>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <USART_PeriClockControl+0x78>)
 8000cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cf6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40011000 	.word	0x40011000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	40004800 	.word	0x40004800
 8000d14:	40004c00 	.word	0x40004c00

08000d18 <USART_IRQInterruptConfig>:
 *
 * @Note              -

 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460a      	mov	r2, r1
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	4613      	mov	r3, r2
 8000d26:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d133      	bne.n	8000d96 <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b1f      	cmp	r3, #31
 8000d32:	d80a      	bhi.n	8000d4a <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000d34:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <USART_IRQInterruptConfig+0xf0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	79fa      	ldrb	r2, [r7, #7]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d40:	4611      	mov	r1, r2
 8000d42:	4a31      	ldr	r2, [pc, #196]	; (8000e08 <USART_IRQInterruptConfig+0xf0>)
 8000d44:	430b      	orrs	r3, r1
 8000d46:	6013      	str	r3, [r2, #0]
		{
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000d48:	e059      	b.n	8000dfe <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b1f      	cmp	r3, #31
 8000d4e:	d90f      	bls.n	8000d70 <USART_IRQInterruptConfig+0x58>
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b3f      	cmp	r3, #63	; 0x3f
 8000d54:	d80c      	bhi.n	8000d70 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000d56:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <USART_IRQInterruptConfig+0xf4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	f002 021f 	and.w	r2, r2, #31
 8000d60:	2101      	movs	r1, #1
 8000d62:	fa01 f202 	lsl.w	r2, r1, r2
 8000d66:	4611      	mov	r1, r2
 8000d68:	4a28      	ldr	r2, [pc, #160]	; (8000e0c <USART_IRQInterruptConfig+0xf4>)
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e046      	b.n	8000dfe <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b3f      	cmp	r3, #63	; 0x3f
 8000d74:	d943      	bls.n	8000dfe <USART_IRQInterruptConfig+0xe6>
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b5f      	cmp	r3, #95	; 0x5f
 8000d7a:	d840      	bhi.n	8000dfe <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000d7c:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <USART_IRQInterruptConfig+0xf8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	79fa      	ldrb	r2, [r7, #7]
 8000d82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <USART_IRQInterruptConfig+0xf8>)
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	e033      	b.n	8000dfe <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b1f      	cmp	r3, #31
 8000d9a:	d80a      	bhi.n	8000db2 <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <USART_IRQInterruptConfig+0xfc>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	79fa      	ldrb	r2, [r7, #7]
 8000da2:	2101      	movs	r1, #1
 8000da4:	fa01 f202 	lsl.w	r2, r1, r2
 8000da8:	4611      	mov	r1, r2
 8000daa:	4a1a      	ldr	r2, [pc, #104]	; (8000e14 <USART_IRQInterruptConfig+0xfc>)
 8000dac:	430b      	orrs	r3, r1
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	e025      	b.n	8000dfe <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b1f      	cmp	r3, #31
 8000db6:	d90f      	bls.n	8000dd8 <USART_IRQInterruptConfig+0xc0>
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b3f      	cmp	r3, #63	; 0x3f
 8000dbc:	d80c      	bhi.n	8000dd8 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <USART_IRQInterruptConfig+0x100>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	f002 021f 	and.w	r2, r2, #31
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fa01 f202 	lsl.w	r2, r1, r2
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4a11      	ldr	r2, [pc, #68]	; (8000e18 <USART_IRQInterruptConfig+0x100>)
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e012      	b.n	8000dfe <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2b05      	cmp	r3, #5
 8000ddc:	d90f      	bls.n	8000dfe <USART_IRQInterruptConfig+0xe6>
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b5f      	cmp	r3, #95	; 0x5f
 8000de2:	d80c      	bhi.n	8000dfe <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <USART_IRQInterruptConfig+0x104>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	79fa      	ldrb	r2, [r7, #7]
 8000dea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000dee:	2101      	movs	r1, #1
 8000df0:	fa01 f202 	lsl.w	r2, r1, r2
 8000df4:	4611      	mov	r1, r2
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <USART_IRQInterruptConfig+0x104>)
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	e7ff      	b.n	8000dfe <USART_IRQInterruptConfig+0xe6>
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000e104 	.word	0xe000e104
 8000e10:	e000e10c 	.word	0xe000e10c
 8000e14:	e000e180 	.word	0xe000e180
 8000e18:	e000e184 	.word	0xe000e184
 8000e1c:	e000e18c 	.word	0xe000e18c

08000e20 <USART_IRQHandling>:
	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );

}

void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e32:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e3e:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d021      	beq.n	8000e8a <USART_IRQHandling+0x6a>
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d01e      	beq.n	8000e8a <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application  =callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d119      	bne.n	8000e8a <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d115      	bne.n	8000e8a <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e6c:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8000e82:	2100      	movs	r1, #0
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fac3 	bl	8000410 <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e94:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea0:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d055      	beq.n	8000f54 <USART_IRQHandling+0x134>
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d052      	beq.n	8000f54 <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d14d      	bne.n	8000f54 <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d03d      	beq.n	8000f3c <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7b5b      	ldrb	r3, [r3, #13]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d129      	bne.n	8000f1c <USART_IRQHandling+0xfc>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000edc:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7b9b      	ldrb	r3, [r3, #14]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10f      	bne.n	8000f06 <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	1e9a      	subs	r2, r3, #2
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]
 8000f04:	e01a      	b.n	8000f3c <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	1e5a      	subs	r2, r3, #1
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	619a      	str	r2, [r3, #24]
 8000f1a:	e00f      	b.n	8000f3c <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	781a      	ldrb	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	1e5a      	subs	r2, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d107      	bne.n	8000f54 <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f52:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0320 	and.w	r3, r3, #32
 8000f5e:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	f003 0320 	and.w	r3, r3, #32
 8000f6a:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d075      	beq.n	800105e <USART_IRQHandling+0x23e>
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d072      	beq.n	800105e <USART_IRQHandling+0x23e>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d16d      	bne.n	800105e <USART_IRQHandling+0x23e>
		{
			if(pUSARTHandle->RxLen > 0)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d04e      	beq.n	8001028 <USART_IRQHandling+0x208>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7b5b      	ldrb	r3, [r3, #13]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d12f      	bne.n	8000ff2 <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7b9b      	ldrb	r3, [r3, #14]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d119      	bne.n	8000fce <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000faa:	b292      	uxth	r2, r2
 8000fac:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	1e9a      	subs	r2, r3, #2
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	61da      	str	r2, [r3, #28]
 8000fcc:	e02c      	b.n	8001028 <USART_IRQHandling+0x208>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	61da      	str	r2, [r3, #28]
 8000ff0:	e01a      	b.n	8001028 <USART_IRQHandling+0x208>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7b9b      	ldrb	r3, [r3, #14]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d107      	bne.n	800100a <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	e009      	b.n	800101e <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					//pUSARTHandle->pRxBuffer++;
					pUSARTHandle->RxLen-=1;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(*pUSARTHandle->pRxBuffer == '.')
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b2e      	cmp	r3, #46	; 0x2e
 8001030:	d110      	bne.n	8001054 <USART_IRQHandling+0x234>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0220 	bic.w	r2, r2, #32
 8001040:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 800104a:	2101      	movs	r1, #1
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff f9df 	bl	8000410 <USART_ApplicationEventCallback>
 8001052:	e004      	b.n	800105e <USART_IRQHandling+0x23e>
			}else{
				pUSARTHandle->pRxBuffer++;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	615a      	str	r2, [r3, #20]

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001068:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001074:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001080:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00e      	beq.n	80010a6 <USART_IRQHandling+0x286>
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00b      	beq.n	80010a6 <USART_IRQHandling+0x286>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~( 1 << USART_SR_CTS);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800109c:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 800109e:	2103      	movs	r1, #3
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff f9b5 	bl	8000410 <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00f      	beq.n	80010e4 <USART_IRQHandling+0x2c4>
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00c      	beq.n	80010e4 <USART_IRQHandling+0x2c4>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	f023 0310 	bic.w	r3, r3, #16
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 80010dc:	2102      	movs	r1, #2
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff f996 	bl	8000410 <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	f003 0305 	and.w	r3, r3, #5
 80010fa:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <USART_IRQHandling+0x2f0>
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <USART_IRQHandling+0x2f0>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8001108:	2107      	movs	r1, #7
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff f980 	bl	8000410 <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	613b      	str	r3, [r7, #16]

	if(temp2 )
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d01e      	beq.n	8001160 <USART_IRQHandling+0x340>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <USART_IRQHandling+0x31c>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8001134:	2105      	movs	r1, #5
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f96a 	bl	8000410 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NE) )
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <USART_IRQHandling+0x32e>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 8001146:	2106      	movs	r1, #6
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff f961 	bl	8000410 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <USART_IRQHandling+0x340>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8001158:	2107      	movs	r1, #7
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff f958 	bl	8000410 <USART_ApplicationEventCallback>
		}
	}
}
 8001160:	bf00      	nop
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8001168:	480d      	ldr	r0, [pc, #52]	; (80011a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800116a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800116c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001172:	490d      	ldr	r1, [pc, #52]	; (80011a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <LoopForever+0xe>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001188:	4c0a      	ldr	r4, [pc, #40]	; (80011b4 <LoopForever+0x16>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001196:	f000 f819 	bl	80011cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119a:	f7ff f8ad 	bl	80002f8 <main>

0800119e <LoopForever>:

LoopForever:
  b LoopForever
 800119e:	e7fe      	b.n	800119e <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 80011a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80011ac:	0800124c 	.word	0x0800124c
  ldr r2, =_sbss
 80011b0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80011b4:	200000bc 	.word	0x200000bc

080011b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC_IRQHandler>

080011ba <memset>:
 80011ba:	4402      	add	r2, r0
 80011bc:	4603      	mov	r3, r0
 80011be:	4293      	cmp	r3, r2
 80011c0:	d100      	bne.n	80011c4 <memset+0xa>
 80011c2:	4770      	bx	lr
 80011c4:	f803 1b01 	strb.w	r1, [r3], #1
 80011c8:	e7f9      	b.n	80011be <memset+0x4>
	...

080011cc <__libc_init_array>:
 80011cc:	b570      	push	{r4, r5, r6, lr}
 80011ce:	4d0d      	ldr	r5, [pc, #52]	; (8001204 <__libc_init_array+0x38>)
 80011d0:	4c0d      	ldr	r4, [pc, #52]	; (8001208 <__libc_init_array+0x3c>)
 80011d2:	1b64      	subs	r4, r4, r5
 80011d4:	10a4      	asrs	r4, r4, #2
 80011d6:	2600      	movs	r6, #0
 80011d8:	42a6      	cmp	r6, r4
 80011da:	d109      	bne.n	80011f0 <__libc_init_array+0x24>
 80011dc:	4d0b      	ldr	r5, [pc, #44]	; (800120c <__libc_init_array+0x40>)
 80011de:	4c0c      	ldr	r4, [pc, #48]	; (8001210 <__libc_init_array+0x44>)
 80011e0:	f000 f818 	bl	8001214 <_init>
 80011e4:	1b64      	subs	r4, r4, r5
 80011e6:	10a4      	asrs	r4, r4, #2
 80011e8:	2600      	movs	r6, #0
 80011ea:	42a6      	cmp	r6, r4
 80011ec:	d105      	bne.n	80011fa <__libc_init_array+0x2e>
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
 80011f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80011f4:	4798      	blx	r3
 80011f6:	3601      	adds	r6, #1
 80011f8:	e7ee      	b.n	80011d8 <__libc_init_array+0xc>
 80011fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80011fe:	4798      	blx	r3
 8001200:	3601      	adds	r6, #1
 8001202:	e7f2      	b.n	80011ea <__libc_init_array+0x1e>
 8001204:	08001244 	.word	0x08001244
 8001208:	08001244 	.word	0x08001244
 800120c:	08001244 	.word	0x08001244
 8001210:	08001248 	.word	0x08001248

08001214 <_init>:
 8001214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001216:	bf00      	nop
 8001218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800121a:	bc08      	pop	{r3}
 800121c:	469e      	mov	lr, r3
 800121e:	4770      	bx	lr

08001220 <_fini>:
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001222:	bf00      	nop
 8001224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001226:	bc08      	pop	{r3}
 8001228:	469e      	mov	lr, r3
 800122a:	4770      	bx	lr
